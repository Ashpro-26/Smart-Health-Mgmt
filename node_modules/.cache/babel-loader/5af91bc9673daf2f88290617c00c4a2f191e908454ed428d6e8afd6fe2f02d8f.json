{"ast":null,"code":"import axios from 'axios';\n\n// Define base URL for API requests\nconst API_URL = process.env.REACT_APP_API_URL || 'http://localhost:5000';\n\n// Configure axios defaults\naxios.defaults.baseURL = API_URL;\naxios.defaults.headers.post['Content-Type'] = 'application/json';\nclass AuthService {\n  // Check if server is available\n  async checkServer() {\n    try {\n      const response = await axios.get('/api/health');\n      return response.data === 'OK';\n    } catch (error) {\n      console.error('Server health check failed:', error);\n      return false;\n    }\n  }\n\n  // Register new user\n  async register(userData) {\n    try {\n      var _response$data;\n      console.log('Making registration API call with:', {\n        name: userData.name,\n        email: userData.email,\n        role: userData.role\n      });\n      const response = await axios.post('/api/auth/register', {\n        name: userData.name.trim(),\n        email: userData.email.trim(),\n        password: userData.password.trim(),\n        role: userData.role || 'patient'\n      });\n      console.log('Registration API response:', response.data);\n      if ((_response$data = response.data) !== null && _response$data !== void 0 && _response$data.token) {\n        localStorage.setItem('token', response.data.token);\n        // Set the token in axios defaults for subsequent requests\n        axios.defaults.headers.common['Authorization'] = `Bearer ${response.data.token}`;\n        const returnData = {\n          token: response.data.token,\n          user: response.data.user || {\n            name: userData.name,\n            email: userData.email,\n            role: userData.role\n          }\n        };\n        console.log('Returning registration data:', returnData);\n        return returnData;\n      } else {\n        console.error('No token in response:', response.data);\n        throw new Error('Registration failed - no token received');\n      }\n    } catch (error) {\n      console.error('Registration API error:', error.response || error);\n      if (error.response) {\n        var _error$response$data, _error$response$data2;\n        // Server responded with an error\n        const message = ((_error$response$data = error.response.data) === null || _error$response$data === void 0 ? void 0 : _error$response$data.message) || ((_error$response$data2 = error.response.data) === null || _error$response$data2 === void 0 ? void 0 : _error$response$data2.error) || 'Registration failed';\n        throw new Error(message);\n      } else if (error.request) {\n        // Request was made but no response received\n        throw new Error('Unable to reach the server. Please check your internet connection.');\n      } else {\n        // Something happened in setting up the request\n        throw new Error(error.message || 'An unexpected error occurred');\n      }\n    }\n  }\n\n  // Login user\n  async login(credentials) {\n    try {\n      var _credentials$email, _credentials$password, _response$data2;\n      // Basic validation\n      if (!(credentials !== null && credentials !== void 0 && (_credentials$email = credentials.email) !== null && _credentials$email !== void 0 && _credentials$email.trim()) || !(credentials !== null && credentials !== void 0 && (_credentials$password = credentials.password) !== null && _credentials$password !== void 0 && _credentials$password.trim())) {\n        throw new Error('Please provide both email and password');\n      }\n      const response = await axios.post('/api/auth/login', {\n        email: credentials.email.trim(),\n        password: credentials.password.trim()\n      });\n      if ((_response$data2 = response.data) !== null && _response$data2 !== void 0 && _response$data2.token) {\n        localStorage.setItem('token', response.data.token);\n        return response.data;\n      } else {\n        throw new Error('Invalid response from server - no token received');\n      }\n    } catch (error) {\n      if (error.response) {\n        var _error$response$data3, _error$response$data4;\n        // Server responded with an error\n        const message = ((_error$response$data3 = error.response.data) === null || _error$response$data3 === void 0 ? void 0 : _error$response$data3.message) || ((_error$response$data4 = error.response.data) === null || _error$response$data4 === void 0 ? void 0 : _error$response$data4.error) || 'Invalid credentials';\n        throw new Error(message);\n      } else if (error.request) {\n        // Request was made but no response received\n        throw new Error('Unable to reach the server. Please check your internet connection.');\n      } else {\n        // Error was thrown before making the request (like validation)\n        throw error;\n      }\n    }\n  }\n\n  // Logout user\n  logout() {\n    localStorage.removeItem('token');\n  }\n\n  // Get current user profile\n  async getCurrentUser() {\n    try {\n      var _response$data3;\n      const token = localStorage.getItem('token');\n      if (!token) return null;\n\n      // Make API call to validate token and get user data\n      const response = await axios.get('/api/auth/profile');\n      return ((_response$data3 = response.data) === null || _response$data3 === void 0 ? void 0 : _response$data3.user) || null;\n    } catch (error) {\n      console.error('Error getting current user:', error);\n      localStorage.removeItem('token');\n      return null;\n    }\n  }\n\n  // Update user profile\n  async updateProfile(userData) {\n    try {\n      return await axios.put('/api/auth/profile', userData);\n    } catch (error) {\n      console.error('Update profile error:', error);\n      throw error;\n    }\n  }\n\n  // Change password\n  async changePassword(passwordData) {\n    try {\n      return await axios.put('/api/auth/change-password', passwordData);\n    } catch (error) {\n      console.error('Change password error:', error);\n      throw error;\n    }\n  }\n\n  // Reset password\n  async resetPassword(email) {\n    try {\n      var _response$data4;\n      console.log('Sending password reset request for:', email);\n      const response = await axios.post('/api/auth/reset-password', {\n        email: email.trim()\n      });\n      console.log('Reset password response:', response.data);\n      if ((_response$data4 = response.data) !== null && _response$data4 !== void 0 && _response$data4.success) {\n        return response.data;\n      } else {\n        throw new Error('Failed to send reset instructions');\n      }\n    } catch (error) {\n      console.error('Reset password error:', error.response || error);\n      if (error.response) {\n        var _error$response$data5, _error$response$data6;\n        // Server responded with an error\n        const message = ((_error$response$data5 = error.response.data) === null || _error$response$data5 === void 0 ? void 0 : _error$response$data5.message) || ((_error$response$data6 = error.response.data) === null || _error$response$data6 === void 0 ? void 0 : _error$response$data6.error) || 'Failed to send reset instructions';\n        throw new Error(message);\n      } else if (error.request) {\n        // Request was made but no response received\n        throw new Error('Unable to reach the server. Please check your internet connection.');\n      } else {\n        // Something happened in setting up the request\n        throw new Error(error.message || 'An unexpected error occurred');\n      }\n    }\n  }\n\n  // Get current auth token\n  getToken() {\n    return localStorage.getItem('token');\n  }\n  isAuthenticated() {\n    const token = this.getToken();\n    if (!token) return false;\n    try {\n      const decoded = this.getCurrentUser();\n      if (!decoded) return false;\n\n      // Check if token is expired\n      const currentTime = Date.now() / 1000;\n      return decoded.exp > currentTime;\n    } catch (error) {\n      return false;\n    }\n  }\n}\nexport default new AuthService();","map":{"version":3,"names":["axios","API_URL","process","env","REACT_APP_API_URL","defaults","baseURL","headers","post","AuthService","checkServer","response","get","data","error","console","register","userData","_response$data","log","name","email","role","trim","password","token","localStorage","setItem","common","returnData","user","Error","_error$response$data","_error$response$data2","message","request","login","credentials","_credentials$email","_credentials$password","_response$data2","_error$response$data3","_error$response$data4","logout","removeItem","getCurrentUser","_response$data3","getItem","updateProfile","put","changePassword","passwordData","resetPassword","_response$data4","success","_error$response$data5","_error$response$data6","getToken","isAuthenticated","decoded","currentTime","Date","now","exp"],"sources":["C:/Users/ashut/Documents/GitHub/Smart-Health-Mgmt/Smart-Healthcare-Mgmt/src/services/authService.js"],"sourcesContent":["import axios from 'axios';\n\n// Define base URL for API requests\nconst API_URL = process.env.REACT_APP_API_URL || 'http://localhost:5000';\n\n// Configure axios defaults\naxios.defaults.baseURL = API_URL;\naxios.defaults.headers.post['Content-Type'] = 'application/json';\n\nclass AuthService {\n  // Check if server is available\n  async checkServer() {\n    try {\n      const response = await axios.get('/api/health');\n      return response.data === 'OK';\n    } catch (error) {\n      console.error('Server health check failed:', error);\n      return false;\n    }\n  }\n\n  // Register new user\n  async register(userData) {\n    try {\n      console.log('Making registration API call with:', {\n        name: userData.name,\n        email: userData.email,\n        role: userData.role\n      });\n\n      const response = await axios.post('/api/auth/register', {\n        name: userData.name.trim(),\n        email: userData.email.trim(),\n        password: userData.password.trim(),\n        role: userData.role || 'patient'\n      });\n      \n      console.log('Registration API response:', response.data);\n\n      if (response.data?.token) {\n        localStorage.setItem('token', response.data.token);\n        // Set the token in axios defaults for subsequent requests\n        axios.defaults.headers.common['Authorization'] = `Bearer ${response.data.token}`;\n        \n        const returnData = {\n          token: response.data.token,\n          user: response.data.user || {\n            name: userData.name,\n            email: userData.email,\n            role: userData.role\n          }\n        };\n        \n        console.log('Returning registration data:', returnData);\n        return returnData;\n      } else {\n        console.error('No token in response:', response.data);\n        throw new Error('Registration failed - no token received');\n      }\n    } catch (error) {\n      console.error('Registration API error:', error.response || error);\n      if (error.response) {\n        // Server responded with an error\n        const message = error.response.data?.message || \n                       error.response.data?.error || \n                       'Registration failed';\n        throw new Error(message);\n      } else if (error.request) {\n        // Request was made but no response received\n        throw new Error('Unable to reach the server. Please check your internet connection.');\n      } else {\n        // Something happened in setting up the request\n        throw new Error(error.message || 'An unexpected error occurred');\n      }\n    }\n  }\n\n  // Login user\n  async login(credentials) {\n    try {\n      // Basic validation\n      if (!credentials?.email?.trim() || !credentials?.password?.trim()) {\n        throw new Error('Please provide both email and password');\n      }\n\n      const response = await axios.post('/api/auth/login', {\n        email: credentials.email.trim(),\n        password: credentials.password.trim()\n      });\n      \n      if (response.data?.token) {\n        localStorage.setItem('token', response.data.token);\n        return response.data;\n      } else {\n        throw new Error('Invalid response from server - no token received');\n      }\n    } catch (error) {\n      if (error.response) {\n        // Server responded with an error\n        const message = error.response.data?.message || \n                       error.response.data?.error || \n                       'Invalid credentials';\n        throw new Error(message);\n      } else if (error.request) {\n        // Request was made but no response received\n        throw new Error('Unable to reach the server. Please check your internet connection.');\n      } else {\n        // Error was thrown before making the request (like validation)\n        throw error;\n      }\n    }\n  }\n\n  // Logout user\n  logout() {\n    localStorage.removeItem('token');\n  }\n\n  // Get current user profile\n  async getCurrentUser() {\n    try {\n      const token = localStorage.getItem('token');\n      if (!token) return null;\n\n      // Make API call to validate token and get user data\n      const response = await axios.get('/api/auth/profile');\n      return response.data?.user || null;\n    } catch (error) {\n      console.error('Error getting current user:', error);\n      localStorage.removeItem('token');\n      return null;\n    }\n  }\n\n  // Update user profile\n  async updateProfile(userData) {\n    try {\n      return await axios.put('/api/auth/profile', userData);\n    } catch (error) {\n      console.error('Update profile error:', error);\n      throw error;\n    }\n  }\n\n  // Change password\n  async changePassword(passwordData) {\n    try {\n      return await axios.put('/api/auth/change-password', passwordData);\n    } catch (error) {\n      console.error('Change password error:', error);\n      throw error;\n    }\n  }\n\n  // Reset password\n  async resetPassword(email) {\n    try {\n      console.log('Sending password reset request for:', email);\n      \n      const response = await axios.post('/api/auth/reset-password', { \n        email: email.trim() \n      });\n      \n      console.log('Reset password response:', response.data);\n      \n      if (response.data?.success) {\n        return response.data;\n      } else {\n        throw new Error('Failed to send reset instructions');\n      }\n    } catch (error) {\n      console.error('Reset password error:', error.response || error);\n      if (error.response) {\n        // Server responded with an error\n        const message = error.response.data?.message || \n                       error.response.data?.error || \n                       'Failed to send reset instructions';\n        throw new Error(message);\n      } else if (error.request) {\n        // Request was made but no response received\n        throw new Error('Unable to reach the server. Please check your internet connection.');\n      } else {\n        // Something happened in setting up the request\n        throw new Error(error.message || 'An unexpected error occurred');\n      }\n    }\n  }\n\n  // Get current auth token\n  getToken() {\n    return localStorage.getItem('token');\n  }\n\n  isAuthenticated() {\n    const token = this.getToken();\n    if (!token) return false;\n\n    try {\n      const decoded = this.getCurrentUser();\n      if (!decoded) return false;\n\n      // Check if token is expired\n      const currentTime = Date.now() / 1000;\n      return decoded.exp > currentTime;\n    } catch (error) {\n      return false;\n    }\n  }\n}\n\nexport default new AuthService(); "],"mappings":"AAAA,OAAOA,KAAK,MAAM,OAAO;;AAEzB;AACA,MAAMC,OAAO,GAAGC,OAAO,CAACC,GAAG,CAACC,iBAAiB,IAAI,uBAAuB;;AAExE;AACAJ,KAAK,CAACK,QAAQ,CAACC,OAAO,GAAGL,OAAO;AAChCD,KAAK,CAACK,QAAQ,CAACE,OAAO,CAACC,IAAI,CAAC,cAAc,CAAC,GAAG,kBAAkB;AAEhE,MAAMC,WAAW,CAAC;EAChB;EACA,MAAMC,WAAWA,CAAA,EAAG;IAClB,IAAI;MACF,MAAMC,QAAQ,GAAG,MAAMX,KAAK,CAACY,GAAG,CAAC,aAAa,CAAC;MAC/C,OAAOD,QAAQ,CAACE,IAAI,KAAK,IAAI;IAC/B,CAAC,CAAC,OAAOC,KAAK,EAAE;MACdC,OAAO,CAACD,KAAK,CAAC,6BAA6B,EAAEA,KAAK,CAAC;MACnD,OAAO,KAAK;IACd;EACF;;EAEA;EACA,MAAME,QAAQA,CAACC,QAAQ,EAAE;IACvB,IAAI;MAAA,IAAAC,cAAA;MACFH,OAAO,CAACI,GAAG,CAAC,oCAAoC,EAAE;QAChDC,IAAI,EAAEH,QAAQ,CAACG,IAAI;QACnBC,KAAK,EAAEJ,QAAQ,CAACI,KAAK;QACrBC,IAAI,EAAEL,QAAQ,CAACK;MACjB,CAAC,CAAC;MAEF,MAAMX,QAAQ,GAAG,MAAMX,KAAK,CAACQ,IAAI,CAAC,oBAAoB,EAAE;QACtDY,IAAI,EAAEH,QAAQ,CAACG,IAAI,CAACG,IAAI,CAAC,CAAC;QAC1BF,KAAK,EAAEJ,QAAQ,CAACI,KAAK,CAACE,IAAI,CAAC,CAAC;QAC5BC,QAAQ,EAAEP,QAAQ,CAACO,QAAQ,CAACD,IAAI,CAAC,CAAC;QAClCD,IAAI,EAAEL,QAAQ,CAACK,IAAI,IAAI;MACzB,CAAC,CAAC;MAEFP,OAAO,CAACI,GAAG,CAAC,4BAA4B,EAAER,QAAQ,CAACE,IAAI,CAAC;MAExD,KAAAK,cAAA,GAAIP,QAAQ,CAACE,IAAI,cAAAK,cAAA,eAAbA,cAAA,CAAeO,KAAK,EAAE;QACxBC,YAAY,CAACC,OAAO,CAAC,OAAO,EAAEhB,QAAQ,CAACE,IAAI,CAACY,KAAK,CAAC;QAClD;QACAzB,KAAK,CAACK,QAAQ,CAACE,OAAO,CAACqB,MAAM,CAAC,eAAe,CAAC,GAAG,UAAUjB,QAAQ,CAACE,IAAI,CAACY,KAAK,EAAE;QAEhF,MAAMI,UAAU,GAAG;UACjBJ,KAAK,EAAEd,QAAQ,CAACE,IAAI,CAACY,KAAK;UAC1BK,IAAI,EAAEnB,QAAQ,CAACE,IAAI,CAACiB,IAAI,IAAI;YAC1BV,IAAI,EAAEH,QAAQ,CAACG,IAAI;YACnBC,KAAK,EAAEJ,QAAQ,CAACI,KAAK;YACrBC,IAAI,EAAEL,QAAQ,CAACK;UACjB;QACF,CAAC;QAEDP,OAAO,CAACI,GAAG,CAAC,8BAA8B,EAAEU,UAAU,CAAC;QACvD,OAAOA,UAAU;MACnB,CAAC,MAAM;QACLd,OAAO,CAACD,KAAK,CAAC,uBAAuB,EAAEH,QAAQ,CAACE,IAAI,CAAC;QACrD,MAAM,IAAIkB,KAAK,CAAC,yCAAyC,CAAC;MAC5D;IACF,CAAC,CAAC,OAAOjB,KAAK,EAAE;MACdC,OAAO,CAACD,KAAK,CAAC,yBAAyB,EAAEA,KAAK,CAACH,QAAQ,IAAIG,KAAK,CAAC;MACjE,IAAIA,KAAK,CAACH,QAAQ,EAAE;QAAA,IAAAqB,oBAAA,EAAAC,qBAAA;QAClB;QACA,MAAMC,OAAO,GAAG,EAAAF,oBAAA,GAAAlB,KAAK,CAACH,QAAQ,CAACE,IAAI,cAAAmB,oBAAA,uBAAnBA,oBAAA,CAAqBE,OAAO,OAAAD,qBAAA,GAC7BnB,KAAK,CAACH,QAAQ,CAACE,IAAI,cAAAoB,qBAAA,uBAAnBA,qBAAA,CAAqBnB,KAAK,KAC1B,qBAAqB;QACpC,MAAM,IAAIiB,KAAK,CAACG,OAAO,CAAC;MAC1B,CAAC,MAAM,IAAIpB,KAAK,CAACqB,OAAO,EAAE;QACxB;QACA,MAAM,IAAIJ,KAAK,CAAC,oEAAoE,CAAC;MACvF,CAAC,MAAM;QACL;QACA,MAAM,IAAIA,KAAK,CAACjB,KAAK,CAACoB,OAAO,IAAI,8BAA8B,CAAC;MAClE;IACF;EACF;;EAEA;EACA,MAAME,KAAKA,CAACC,WAAW,EAAE;IACvB,IAAI;MAAA,IAAAC,kBAAA,EAAAC,qBAAA,EAAAC,eAAA;MACF;MACA,IAAI,EAACH,WAAW,aAAXA,WAAW,gBAAAC,kBAAA,GAAXD,WAAW,CAAEhB,KAAK,cAAAiB,kBAAA,eAAlBA,kBAAA,CAAoBf,IAAI,CAAC,CAAC,KAAI,EAACc,WAAW,aAAXA,WAAW,gBAAAE,qBAAA,GAAXF,WAAW,CAAEb,QAAQ,cAAAe,qBAAA,eAArBA,qBAAA,CAAuBhB,IAAI,CAAC,CAAC,GAAE;QACjE,MAAM,IAAIQ,KAAK,CAAC,wCAAwC,CAAC;MAC3D;MAEA,MAAMpB,QAAQ,GAAG,MAAMX,KAAK,CAACQ,IAAI,CAAC,iBAAiB,EAAE;QACnDa,KAAK,EAAEgB,WAAW,CAAChB,KAAK,CAACE,IAAI,CAAC,CAAC;QAC/BC,QAAQ,EAAEa,WAAW,CAACb,QAAQ,CAACD,IAAI,CAAC;MACtC,CAAC,CAAC;MAEF,KAAAiB,eAAA,GAAI7B,QAAQ,CAACE,IAAI,cAAA2B,eAAA,eAAbA,eAAA,CAAef,KAAK,EAAE;QACxBC,YAAY,CAACC,OAAO,CAAC,OAAO,EAAEhB,QAAQ,CAACE,IAAI,CAACY,KAAK,CAAC;QAClD,OAAOd,QAAQ,CAACE,IAAI;MACtB,CAAC,MAAM;QACL,MAAM,IAAIkB,KAAK,CAAC,kDAAkD,CAAC;MACrE;IACF,CAAC,CAAC,OAAOjB,KAAK,EAAE;MACd,IAAIA,KAAK,CAACH,QAAQ,EAAE;QAAA,IAAA8B,qBAAA,EAAAC,qBAAA;QAClB;QACA,MAAMR,OAAO,GAAG,EAAAO,qBAAA,GAAA3B,KAAK,CAACH,QAAQ,CAACE,IAAI,cAAA4B,qBAAA,uBAAnBA,qBAAA,CAAqBP,OAAO,OAAAQ,qBAAA,GAC7B5B,KAAK,CAACH,QAAQ,CAACE,IAAI,cAAA6B,qBAAA,uBAAnBA,qBAAA,CAAqB5B,KAAK,KAC1B,qBAAqB;QACpC,MAAM,IAAIiB,KAAK,CAACG,OAAO,CAAC;MAC1B,CAAC,MAAM,IAAIpB,KAAK,CAACqB,OAAO,EAAE;QACxB;QACA,MAAM,IAAIJ,KAAK,CAAC,oEAAoE,CAAC;MACvF,CAAC,MAAM;QACL;QACA,MAAMjB,KAAK;MACb;IACF;EACF;;EAEA;EACA6B,MAAMA,CAAA,EAAG;IACPjB,YAAY,CAACkB,UAAU,CAAC,OAAO,CAAC;EAClC;;EAEA;EACA,MAAMC,cAAcA,CAAA,EAAG;IACrB,IAAI;MAAA,IAAAC,eAAA;MACF,MAAMrB,KAAK,GAAGC,YAAY,CAACqB,OAAO,CAAC,OAAO,CAAC;MAC3C,IAAI,CAACtB,KAAK,EAAE,OAAO,IAAI;;MAEvB;MACA,MAAMd,QAAQ,GAAG,MAAMX,KAAK,CAACY,GAAG,CAAC,mBAAmB,CAAC;MACrD,OAAO,EAAAkC,eAAA,GAAAnC,QAAQ,CAACE,IAAI,cAAAiC,eAAA,uBAAbA,eAAA,CAAehB,IAAI,KAAI,IAAI;IACpC,CAAC,CAAC,OAAOhB,KAAK,EAAE;MACdC,OAAO,CAACD,KAAK,CAAC,6BAA6B,EAAEA,KAAK,CAAC;MACnDY,YAAY,CAACkB,UAAU,CAAC,OAAO,CAAC;MAChC,OAAO,IAAI;IACb;EACF;;EAEA;EACA,MAAMI,aAAaA,CAAC/B,QAAQ,EAAE;IAC5B,IAAI;MACF,OAAO,MAAMjB,KAAK,CAACiD,GAAG,CAAC,mBAAmB,EAAEhC,QAAQ,CAAC;IACvD,CAAC,CAAC,OAAOH,KAAK,EAAE;MACdC,OAAO,CAACD,KAAK,CAAC,uBAAuB,EAAEA,KAAK,CAAC;MAC7C,MAAMA,KAAK;IACb;EACF;;EAEA;EACA,MAAMoC,cAAcA,CAACC,YAAY,EAAE;IACjC,IAAI;MACF,OAAO,MAAMnD,KAAK,CAACiD,GAAG,CAAC,2BAA2B,EAAEE,YAAY,CAAC;IACnE,CAAC,CAAC,OAAOrC,KAAK,EAAE;MACdC,OAAO,CAACD,KAAK,CAAC,wBAAwB,EAAEA,KAAK,CAAC;MAC9C,MAAMA,KAAK;IACb;EACF;;EAEA;EACA,MAAMsC,aAAaA,CAAC/B,KAAK,EAAE;IACzB,IAAI;MAAA,IAAAgC,eAAA;MACFtC,OAAO,CAACI,GAAG,CAAC,qCAAqC,EAAEE,KAAK,CAAC;MAEzD,MAAMV,QAAQ,GAAG,MAAMX,KAAK,CAACQ,IAAI,CAAC,0BAA0B,EAAE;QAC5Da,KAAK,EAAEA,KAAK,CAACE,IAAI,CAAC;MACpB,CAAC,CAAC;MAEFR,OAAO,CAACI,GAAG,CAAC,0BAA0B,EAAER,QAAQ,CAACE,IAAI,CAAC;MAEtD,KAAAwC,eAAA,GAAI1C,QAAQ,CAACE,IAAI,cAAAwC,eAAA,eAAbA,eAAA,CAAeC,OAAO,EAAE;QAC1B,OAAO3C,QAAQ,CAACE,IAAI;MACtB,CAAC,MAAM;QACL,MAAM,IAAIkB,KAAK,CAAC,mCAAmC,CAAC;MACtD;IACF,CAAC,CAAC,OAAOjB,KAAK,EAAE;MACdC,OAAO,CAACD,KAAK,CAAC,uBAAuB,EAAEA,KAAK,CAACH,QAAQ,IAAIG,KAAK,CAAC;MAC/D,IAAIA,KAAK,CAACH,QAAQ,EAAE;QAAA,IAAA4C,qBAAA,EAAAC,qBAAA;QAClB;QACA,MAAMtB,OAAO,GAAG,EAAAqB,qBAAA,GAAAzC,KAAK,CAACH,QAAQ,CAACE,IAAI,cAAA0C,qBAAA,uBAAnBA,qBAAA,CAAqBrB,OAAO,OAAAsB,qBAAA,GAC7B1C,KAAK,CAACH,QAAQ,CAACE,IAAI,cAAA2C,qBAAA,uBAAnBA,qBAAA,CAAqB1C,KAAK,KAC1B,mCAAmC;QAClD,MAAM,IAAIiB,KAAK,CAACG,OAAO,CAAC;MAC1B,CAAC,MAAM,IAAIpB,KAAK,CAACqB,OAAO,EAAE;QACxB;QACA,MAAM,IAAIJ,KAAK,CAAC,oEAAoE,CAAC;MACvF,CAAC,MAAM;QACL;QACA,MAAM,IAAIA,KAAK,CAACjB,KAAK,CAACoB,OAAO,IAAI,8BAA8B,CAAC;MAClE;IACF;EACF;;EAEA;EACAuB,QAAQA,CAAA,EAAG;IACT,OAAO/B,YAAY,CAACqB,OAAO,CAAC,OAAO,CAAC;EACtC;EAEAW,eAAeA,CAAA,EAAG;IAChB,MAAMjC,KAAK,GAAG,IAAI,CAACgC,QAAQ,CAAC,CAAC;IAC7B,IAAI,CAAChC,KAAK,EAAE,OAAO,KAAK;IAExB,IAAI;MACF,MAAMkC,OAAO,GAAG,IAAI,CAACd,cAAc,CAAC,CAAC;MACrC,IAAI,CAACc,OAAO,EAAE,OAAO,KAAK;;MAE1B;MACA,MAAMC,WAAW,GAAGC,IAAI,CAACC,GAAG,CAAC,CAAC,GAAG,IAAI;MACrC,OAAOH,OAAO,CAACI,GAAG,GAAGH,WAAW;IAClC,CAAC,CAAC,OAAO9C,KAAK,EAAE;MACd,OAAO,KAAK;IACd;EACF;AACF;AAEA,eAAe,IAAIL,WAAW,CAAC,CAAC","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}